#summary(dNotNA$diff)
}
graphClusterScoreDiff(dataCluster)
#FIX: defensive...check for business_id, km_cluster, review_stars
graphClusterScoreDiff <- function (fullclusterdata) {
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA < clusters,]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- maxD-minD
#boxplot(dNotNA$diff)
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "green",
border = "blue")
#summary(dNotNA$diff)
}
graphClusterScoreDiff(dataCluster)
graphClusterScoreDiff <- function (fullclusterdata) {
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA < clusters,]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- maxD-minD
#boxplot(dNotNA$diff)
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
#summary(dNotNA$diff)
}
graphClusterScoreDiff(dataCluster)
data("join100Sample")
data("user100Sample")
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
dataCluster <- addCluster(join100Sample,appendKmeansCluster(userFeatures, k = 4))
graphScoreDiff(dataCluster)
graphScoreDiff <- function (fullclusterdata) {
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA < clusters,]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- maxD-minD
#boxplot(dNotNA$diff)
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
#summary(dNotNA$diff)
}
data("join100Sample")
data("user100Sample")
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
dataCluster <- addCluster(join100Sample,appendKmeansCluster(userFeatures, k = 4))
graphScoreDiff(dataCluster)
graphScoreDiff <- function (fullclusterdata) {
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA < clusters,]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
#boxplot(dNotNA$diff)
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
#summary(dNotNA$diff)
}
data("join100Sample")
data("user100Sample")
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
dataCluster <- addCluster(join100Sample,appendKmeansCluster(userFeatures, k = 4))
graphScoreDiff(dataCluster)
colnames <- c("business_id","km_cluster","review_stars")
sum(colnames %in% names(dataCluster))
is.true(colnames %in% names(dataCluster))
all(colnames %in% names(dataCluster))
all(colnames %in% names(dataCluster[,-2]))
graphScoreDiff <- function (fullclusterdata) {
colnames <- c("business_id","km_cluster","review_stars")
if(!all(colnames %in% names(fullclusterdata))) {
stop(paste("dataframe must contain variables including:", colnames, sep = " "))}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA < clusters,]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
#boxplot(dNotNA$diff)
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
#summary(dNotNA$diff)
}
data("join100Sample")
data("user100Sample")
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
dataCluster <- addCluster(join100Sample,appendKmeansCluster(userFeatures, k = 4))
graphScoreDiff(dataCluster)
graphClusterScoreDiff(dataCluster[,-2])
!all(colnames %in% names(fullclusterdata))
!all(colnames %in% names(dataCluster))
!all(colnames %in% names(dataCluster[,-2]))
if(!all(colnames %in% names(dataCluster))) {
stop(paste("dataframe must contain variables including:", colnames, sep = " "))}
if(!all(colnames %in% names(dataCluster[,-2]))) {
stop(paste("dataframe must contain variables including:", colnames, sep = " "))}
graphScoreDiff <- function (fullclusterdata) {
colnames <- c("business_id","km_cluster","review_stars")
if(!all(colnames %in% names(fullclusterdata))) {
stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA < clusters,]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphClusterScoreDiff(dataCluster[,-2])
graphClusterScoreDiff(dataCluster)
View(d)
graphScoreDiff <- function (fullclusterdata) {
colnames <- c("business_id","km_cluster","review_stars")
if(!all(colnames %in% names(fullclusterdata))) {
stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters-1)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA <= (clusters-2),]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphClusterScoreDiff(dataCluster)
graphClusterScoreDiff(dataCluster)
graphScoreDiff <- function (fullclusterdata) {
#colnames <- c("business_id","km_cluster","review_stars")
#if(!all(colnames %in% names(fullclusterdata))) {
#  stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
for(x in seq(clusters-1)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA <= (clusters-2),]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphClusterScoreDiff(dataCluster)
seq(clusters-1)
graphScoreDiff <- function (fullclusterdata) {
#colnames <- c("business_id","km_cluster","review_stars")
#if(!all(colnames %in% names(fullclusterdata))) {
#  stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
print("groupedData has rows:",nrow())
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
print("d has rows:",nrow())
for(x in seq(clusters-1)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
print("e has number of rows:",nrows(e))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA <= (clusters-2),]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphClusterScoreDiff(dataCluster)
library(dplyr)
data("join100Sample")
data("user100Sample")
clusters <- 4
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
userCluster <- appendKmeansCluster(userFeatures, k = clusters)
#recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
dataCluster <- addCluster(join100Sample,userCluster)
addCluster <- function (joinedData, userProfile, joinVariable = "user_id") {
left_join(joinedData,userProfile[,c("user_id","km_cluster")],by = "user_id")
}
library(dplyr)
data("join100Sample")
data("user100Sample")
clusters <- 4
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
userCluster <- appendKmeansCluster(userFeatures, k = clusters)
#recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
dataCluster <- addCluster(join100Sample,userCluster)
graphScoreDiff <- function (fullclusterdata) {
#colnames <- c("business_id","km_cluster","review_stars")
#if(!all(colnames %in% names(fullclusterdata))) {
#  stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
print("groupedData has rows:",nrow())
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
print("d has rows:",nrow())
for(x in seq(clusters-1)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
print("e has number of rows:",nrows(e))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA <= (clusters-2),]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphClusterScoreDiff(dataCluster)
graphScoreDiff(dataCluster)
graphScoreDiff <- function (fullclusterdata) {
#colnames <- c("business_id","km_cluster","review_stars")
#if(!all(colnames %in% names(fullclusterdata))) {
#  stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
#print("groupedData has rows:",nrow())
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
#print("d has rows:",nrow())
for(x in seq(clusters-1)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
#print("e has number of rows:",nrows(e))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA <= (clusters-2),]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphScoreDiff(dataCluster)
graphScoreDiff <- function (fullclusterdata) {
colnames <- c("business_id","km_cluster","review_stars")
if(!all(colnames %in% names(fullclusterdata))) {
stop("dataframe must contain variables including business_id, km_cluster and review_stars")}
clusters <- sum(unique(fullclusterdata$km_cluster))
groupedData <- group_by(fullclusterdata,business_id)
#print("groupedData has rows:",nrow())
d <- summarize(groupedData, mean(review_stars[km_cluster==1]))
#print("d has rows:",nrow())
for(x in seq(clusters-1)) {
e <- summarize(groupedData, mean(review_stars[km_cluster == (x+1)]))
#print("e has number of rows:",nrows(e))
d[,(x+2)] <- e[,2]
}
dCountISNA <- apply(d, 1, function (x) sum(is.na(x)))
dNotNA <- d[dCountISNA <= (clusters-2),]
dNotNA$max <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA))
dNotNA$min <- apply(dNotNA[,-1], 1, function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA))
dNotNA$diff <- dNotNA$max - dNotNA$min
hist(dNotNA$diff,
main = "Histogram of Difference in Cluster Score Min and Max",
xlab = "Difference Between Min and Max Cluster Scores",
col = "blue",
border = "black")
}
graphScoreDiff(dataCluster)
graphScoreDiff(dataCluster[,-2])
1
?graphScoreDiff
example("graphScoreDiff")
?addCluster
exammple(addCluster())
example(addCluster)
example(addCluster)
install.packages("testthat")
install.packages('randomForest')
library(randomForest)
# Set a unique seed number so you get the same results everytime you run the below model,
# the number does not matter
set.seed(1)
mtry <- tuneRF(dataCluster[,1:40], dataCluster[,41], mtryStart=1, ntreeTry=50, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE)
dataRoughFix <- na.roughfix(dataCluster)
View(userCluster)
data <- userCluster[,-c("user_id","user_name","friends")]
data <- userCluster[,!c("user_id","user_name","friends") %in% names(userCluster)]
data <- userCluster[,c("user_id","user_name","friends") %in% names(userCluster)]
c("user_id","user_name","friends") %in% names(userCluster)
names(userCluster) %in% c("user_id","user_name","friends")
!names(userCluster) %in% c("user_id","user_name","friends")
data <- userCluster[,!names(userCluster) %in% c("user_id","user_name","friends")]
mtry <- tuneRF(data[,1:26], dataCluster[,27], mtryStart=1, ntreeTry=50, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE)
mtry <- tuneRF(data[,1:26], data[,27], mtryStart=1, ntreeTry=50, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE)
fit1 <- randomForest(as.factor(km_cluster) ~ ., data=data, importance=TRUE, ntree=100, mtry=8)
fit4 <- randomForest(as.factor(km_cluster) ~ ., data=data, importance=TRUE, ntree=100, mtry=8)
varImpPlot(fit4)
fit4.pred <- predict(fit4, stest, type="response")
mtry <- tuneRF(data[,1:26], data[,27], mtryStart=1, ntreeTry=50, stepFactor=2, improve=0.05,
trace=TRUE, plot=TRUE, doBest=FALSE)
?randomForest
?appendUserData
?appendKmeansCluster
#-add features-#
data("user100Sample")
dim(user100Sample)
names(user100Sample)
userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
dim(userFeatures)
names(userFeatures)
#-add clusters-#
userCluster <- appendKmeansCluster(userFeatures, k = 4)[,c("user_id","user_name","km_cluster")]
head(userCluster)
table(userCluster$km_cluster)
?recommendByCluster
recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
sapply(seq(unique(userCluster$km_cluster)), function (x) {print(head(recos[[x]])[,c("cluster_grp","name")])}) #prints top recos for each cluster
recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
sapply(seq(unique(userCluster$km_cluster)), function (x) {print(recos[[x]])[,c("cluster_grp","name")])[1:3,]})) #prints top recos for each cluster
recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
sapply(seq(unique(userCluster$km_cluster)), function (x) {print(recos[[x]])[1:3,c("cluster_grp","name")])}) #prints top recos for each cluster
recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
sapply(seq(unique(userCluster$km_cluster)), function (x) {print(recos[[x]])[1:3,c("cluster_grp","name")]}) #prints top recos for each cluster
recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
sapply(seq(unique(userCluster$km_cluster)), function (x) {(print(recos[[x]]))[1:3,c("cluster_grp","name")]}) #prints top recos for each cluster
?head
recos <- recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2)
sapply(seq(clusters), function (x) {print(head(recos[[x]],n = 3)[,c("cluster_grp","name")])}) #prints top recos for each cluster
recos <- as.data.frame(recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2))
sapply(seq(clusters), function (x) {print(head(recos[[x]],n = 3)[,c("cluster_grp","name")])}) #prints top recos for each cluster
recos <- as.data.frame(recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2))
sapply(seq(clusters), function (x) {print(head(recos[x],n = 3)[,c("cluster_grp","name")])}) #prints top recos for each cluster
recos <- as.data.frame(recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2))
sapply(1:2, function (x) {print(head(recos[[x]],n = 3)[,c("cluster_grp","name")])}) #prints top recos for each cluster
recos <- as.data.frame(recommendByCluster(joinedData = join100Sample, userProfile = userCluster, numberReco = 20, minClusterReview = 2))
sapply((1:2), function (x) {print(head(recos[[x]],n = 3)[,c("cluster_grp","name")])}) #prints top recos per cluster
?recommendByCluster
example("recommendByCluster")
1
?recommendByCluster
example("recommendByCluster")
?rm
oldls <- ls()
1
library(yelpRecommender)
?`yelpRecommender-package`
x <-2
?recommendByCluster
example("recommendByCluster")
oldls %in% ls()
ls() %in% oldls
!ls() %in% oldls
rm(!ls() %in% oldls)
rm(ls()[!ls() %in% oldls])
ls()[(!ls() %in% oldls)]
rm(ls()[(!ls() %in% oldls)])
dim(ls()[(!ls() %in% oldls)])
rm(ls()[(!ls() %in% oldls)])
ls()[(!ls() %in% oldls)]
dim(ls()[(!ls() %in% oldls)])
a <- ls()[(!ls() %in% oldls)]
rm(a)
a <- ls()[(!ls() %in% oldls)]
rm(toString(a))
list(a)
rm(list(a))
?`dplyr-package`
library(yelpRecommender)
?`yelpRecommender-package`
library(yelpRecommender)
library(yelpRecommender)
?recommendByCluster
?`yelpRecommender-package`
?recommendByCluster
library(yelpRecommender)
library(yelpRecommender)
1
?recommendByCluster
example("recommendByCluster")
data("join100Sample")
data("user100Sample")
#clusters <- 4
#userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
#userCluster <- appendKmeansCluster(userFeatures, k = clusters)
recos <- recommendByCluster(joinedData = join100Sample, userData = user100Sample,
numberReco = 20, minClusterReview = 2, clusters = 4)
#' #prints top recommendations for each cluster
sapply(seq(clusters), function (x) {print(head(recos[[x]], n = 3)[,c("cluster_grp","name")])})
data("join100Sample")
data("user100Sample")
clusters <- 4
#userFeatures <- appendUserData(fulldata = join100Sample, userdata = user100Sample)
#userCluster <- appendKmeansCluster(userFeatures, k = clusters)
recos <- recommendByCluster(joinedData = join100Sample, userData = user100Sample,
numberReco = 20, minClusterReview = 2, clusters = 4)
#' #prints top recommendations for each cluster
sapply(seq(clusters), function (x) {print(head(recos[[x]], n = 3)[,c("cluster_grp","name")])})
1
1
library(yelpRecommender)
?recommendByCluster
example("recommendByCluster")
library(yelpRecommender)
?recommendByCluster
example("recommendByCluster")
library(yelpRecommender)
library(yelpRecommender)
setwd("~/Dropbox/Stats290/Project_Shared/rds_files")
join_full <- readRDS(file = "bus_az_rest_df.rds")
join_full <- readRDS(file = "joined_az_rest_final.rds")
join_full <- readRDS(file = "initial_user_profile_final.rds")
join_full <- readRDS(file = "joined_az_rest_final.rds")
user_full <- readRDS(file = "initial_user_profile_final.rds")
library(yelpRecommender)
?recommendByCluster
a <- recommendByCluster(joinedData = joinfull, userData = user_full)
a <- recommendByCluster(joinedData = join_full, userData = user_full)
a
library(yelpRecommender)
remove(list = ls)
remove(list = ls())
library(yelpRecommender)
?listToDataFrame
?jsonToList
example("listToDataFrame")
example("basicRecommend")
example("recomByKeyWords")
library(yelpRecommender)
?basicRecommend
?recommendByCluster
?recomByKeyWords
?library(yelpRocommender)
remove(list = ls())
